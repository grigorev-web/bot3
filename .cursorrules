# Правила для Cursor IDE

## Общие правила
- Всегда отвечай на русском языке
- Следуй лучшим практикам разработки
- Пиши чистый, читаемый код
- Используй современные подходы и паттерны

## Правила документации для лучшей работы Cursor IDE

### 1. Структурированная документация
- Всегда создавай подробный README.md в корне проекта
- Документируй структуру проекта с помощью дерева папок
- Описывай основные компоненты и их назначение
- Добавляй примеры быстрого старта

### 2. JSDoc комментарии
- Используй JSDoc для всех публичных функций и классов
- Описывай параметры, возвращаемые значения и примеры использования
- Добавляй @param, @returns, @example теги
- Группируй связанные функции с помощью @group тегов

### 3. Комментарии в файлах
- Добавляй @fileoverview в начало каждого файла
- Описывай назначение модуля и его ответственность
- Указывай автора и версию
- Документируй зависимости и связи между модулями

### 4. Типизация и интерфейсы
- Если используешь TypeScript, создавай подробные интерфейсы
- Документируй типы данных и их структуру
- Используй @interface для описания объектов
- Добавляй @type для сложных типов

### 5. API документация
- Документируй все эндпоинты с помощью @api тегов
- Описывай параметры запроса и ответы
- Добавляй примеры использования (curl, JavaScript)
- Группируй API по функциональности

### 6. Комментарии для сложной логики
- Разбивай сложные функции на понятные блоки
- Добавляй комментарии для каждого шага алгоритма
- Объясняй неочевидные решения и бизнес-логику
- Используй TODO и FIXME для будущих улучшений

### 7. Конфигурационная документация
- Документируй все конфигурационные файлы
- Объясняй назначение каждой настройки
- Добавляй примеры для разных окружений
- Описывай переменные окружения

### 8. Архитектурная документация
- Создавай ARCHITECTURE.md для сложных проектов
- Описывай общую архитектуру и паттерны
- Документируй потоки данных и зависимости
- Объясняй ключевые технические решения

### 9. Группировка и организация
- Используй @group теги для логической группировки
- Организуй код по функциональности
- Создавай индексные файлы для модулей
- Документируй связи между компонентами

### 10. Примеры и использование
- Добавляй примеры кода везде, где это уместно
- Создавай простые демо-сценарии
- Документируй типичные случаи использования
- Предоставляй готовые к запуску примеры

### 11. Документация в папке docs
- Вся техническая документация должна находиться в папке `docs/`
- Создавай структурированную иерархию документации
- Используй единый формат для всех документов
- Создавай индексные файлы для навигации

### 12. Структура папки docs
```
docs/
├── README.md              # Главная страница документации
├── getting-started/       # Быстрый старт и установка
├── api/                   # API документация
├── architecture/          # Архитектурные решения
├── guides/                # Руководства по использованию
├── examples/              # Примеры кода
├── troubleshooting/       # Решение проблем
└── contributing/          # Правила для контрибьюторов
```

### 13. Формат документации в docs
- Используй Markdown для всех документов
- Добавляй метаданные в начало каждого файла
- Создавай перекрестные ссылки между документами
- Используй единообразные заголовки и структуру

### 14. Метаданные для Cursor IDE
```markdown
---
title: Название документа
description: Краткое описание содержимого
category: api|architecture|guides|examples
tags: [tag1, tag2, tag3]
last_updated: 2024-01-01
author: Имя автора
version: 1.0.0
related_files: [src/module1.js, src/module2.js]
---
```

### 15. Индексация документации
- Создавай `docs/README.md` с оглавлением
- Добавляй навигационные ссылки между документами
- Группируй документы по категориям
- Создавай поисковые теги для быстрого поиска

## Приоритеты документации
1. README.md и основная структура проекта
2. JSDoc для публичных API
3. Комментарии в сложных алгоритмах
4. Конфигурационные файлы
5. Архитектурные решения
6. Примеры использования
7. Техническая документация в папке docs

## Стиль комментариев
- Пиши комментарии на русском языке
- Будь конкретным и информативным
- Избегай очевидных комментариев
- Обновляй документацию при изменении кода

## Обязательные вопросы при работе
- Нужно ли добавить что-то в документацию?
- Требуется ли обновление существующей документации?
- Нужно ли создать новый документ в папке docs?
- Следует ли добавить примеры использования?
- Нужно ли обновить архитектурную документацию?
