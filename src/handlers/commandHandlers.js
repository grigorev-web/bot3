/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start, /help –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
 * @author Telegram Bot Team
 * @version 1.0.0
 * @since 2024-01-01
 * @requires node-telegram-bot-api
 */

/**
 * @typedef {Object} TelegramMessage
 * @property {number} chat.id - ID —á–∞—Ç–∞
 * @property {Object} from - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
 * @property {string} from.first_name - –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 * @property {string} from.last_name - –§–∞–º–∏–ª–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 * @property {string} from.username - Username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 */

/**
 * @class CommandHandlers
 * @description –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
 * @example
 * const commandHandlers = new CommandHandlers(bot);
 * commandHandlers.handleStart(message);
 */
class CommandHandlers {
  /**
   * @constructor
   * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
   */
  constructor(bot) {
    if (!bot) {
      throw new Error('–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è CommandHandlers');
    }
    
    this.bot = bot;
    this.commands = this.getAvailableCommands();
    
    console.log('üîß CommandHandlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * @group Command Information
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
   * @private
   */
  getAvailableCommands() {
    return [
      {
        command: '/start',
        description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
        handler: 'handleStart'
      },
      {
        command: '/help',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
        handler: 'handleHelp'
      }
    ];
  }

  /**
   * @group Command Processing
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
   * @param {TelegramMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
   * @returns {Promise<void>}
   */
  async handleStart(msg) {
    try {
      const chatId = msg.chat.id;
      const userName = this.extractUserName(msg);
      
      const welcomeMessage = this.buildWelcomeMessage(userName);
      
      await this.bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
      
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
      await this.sendErrorMessage(msg.chat.id);
    }
  }

  /**
   * @group Command Processing
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
   * @param {TelegramMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
   * @returns {Promise<void>}
   */
  async handleHelp(msg) {
    try {
      const chatId = msg.chat.id;
      
      const helpText = this.buildHelpMessage();
      
      await this.bot.sendMessage(chatId, helpText, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
      
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help:', error);
      await this.sendErrorMessage(msg.chat.id);
    }
  }

  /**
   * @group Message Building
   * @description –°—Ç—Ä–æ–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @private
   */
  buildWelcomeMessage(userName) {
    return `–ü—Ä–∏–≤–µ—Ç, <b>${userName}</b>! üëã\n\n` +
           `–Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º. ` +
           `–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <code>/help</code> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n` +
           `üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`;
  }

  /**
   * @group Message Building
   * @description –°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
   * @private
   */
  buildHelpMessage() {
    let helpText = 'ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n';
    
    this.commands.forEach(cmd => {
      helpText += `<code>${cmd.command}</code> - ${cmd.description}\n`;
    });
    
    helpText += '\nüí° <i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!</i>';
    
    return helpText;
  }

  /**
   * @group Utility Methods
   * @description –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {TelegramMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {string} –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
   * @private
   */
  extractUserName(msg) {
    if (msg.from) {
      if (msg.from.first_name) {
        return msg.from.first_name;
      } else if (msg.from.username) {
        return '@' + msg.from.username;
      }
    }
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }

  /**
   * @group Error Handling
   * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<void>}
   * @private
   */
  async sendErrorMessage(chatId) {
    try {
      const errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      await this.bot.sendMessage(chatId, errorMessage);
    } catch (sendError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
   * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥
   */
  getCommands() {
    return this.commands;
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
   */
  getCommandCount() {
    return this.commands.length;
  }
}

module.exports = CommandHandlers;
