/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (Large Language Models)
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ProxyAPI –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
 * @author Telegram Bot Team
 * @version 2.0.0
 * @since 2024-01-01
 */

// –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è fetch –≤ Node.js
if (typeof fetch === 'undefined') {
  try {
    const fetchPolyfill = require('node-fetch');
    global.fetch = fetchPolyfill;
    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–∏—Ñ–∏–ª–ª node-fetch');
  } catch (error) {
    console.warn('‚ö†Ô∏è node-fetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Node.js 18+ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ node-fetch');
  }
}

/**
 * @typedef {Object} LLMConfig
 * @property {string} apiKey - API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ProxyAPI
 * @property {string} apiUrl - URL API —Å–µ—Ä–≤–∏—Å–∞ ProxyAPI
 * @property {string} model - –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * @property {number} maxTokens - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
 * @property {number} temperature - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0 - 1.0)
 * @property {number} timeout - –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */

/**
 * @typedef {Object} LLMRequest
 * @property {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
 * @property {string} [systemPrompt] - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @property {Array<Object>} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @property {Object} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 */

/**
 * @typedef {Object} LLMResponse
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
 * @property {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
 * @property {number} tokensUsed - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * @property {number} processingTime - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */

/**
 * @class LLMService
 * @description –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI
 * @example
 * const llmService = new LLMService(config);
 * const response = await llmService.generateResponse('–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');
 */
class LLMService {
  /**
   * @constructor
   * @param {LLMConfig} [config] - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @throws {Error} –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞
   */
  constructor(config = null) {
    // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!config) {
      config = this.readConfigFromEnv();
    }
    
    this.validateConfig(config);
    this.config = { ...config };
    this.isInitialized = false;
    this.apiAvailable = false;
    
    console.log('üîß LLMService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * @group Configuration
   * @description –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM —Å–µ—Ä–≤–∏—Å–∞
   * @param {LLMConfig} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @throws {Error} –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞
   * @private
   */
  validateConfig(config) {
    if (!config.apiKey) {
      throw new Error('API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞');
    }
    
    if (!config.apiUrl) {
      throw new Error('URL API –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞');
    }
    
    if (!config.model) {
      throw new Error('–ú–æ–¥–µ–ª—å LLM –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!config.maxTokens) config.maxTokens = 1000;
    if (!config.temperature) config.temperature = 0.7;
    if (!config.timeout) config.timeout = 30000;
  }

  /**
   * @group Configuration
   * @description –ß–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   * @returns {LLMConfig} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
   * @private
   */
  readConfigFromEnv() {
    const provider = process.env.LLM_PROVIDER || 'proxyApi';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –º–æ–¥–µ–ª–∏
    const model = process.env.PROXYAPI_MODEL || 'gpt-3.5-turbo';
    const modelProvider = this.getProviderFromModel(model);
    
    const config = {
      apiKey: process.env.PROXYAPI_KEY,
      apiUrl: process.env.PROXYAPI_BASE_URL || 'https://api.proxyapi.ru',
      model: model,
      modelProvider: modelProvider,
      maxTokens: parseInt(process.env.PROXYAPI_MAX_TOKENS) || 1000,
      temperature: parseFloat(process.env.PROXYAPI_TEMPERATURE) || 0.7,
      timeout: parseInt(process.env.PROXYAPI_TIMEOUT) || 30000
    };
    
    console.log(`üîß LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –ø—Ä–æ–≤–∞–π–¥–µ—Ä=${provider}, –º–æ–¥–µ–ª—å=${config.model}, URL=${config.apiUrl}/${config.modelProvider}/v1`);
    
    return config;
  }

  /**
   * @group Configuration
   * @description –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
   * @param {string} model - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @private
   */
  getProviderFromModel(model) {
    if (model.startsWith('gpt-') || model.startsWith('o') || model.startsWith('dall-e') || model.startsWith('whisper') || model.startsWith('tts') || model.startsWith('text-embedding')) {
      return 'openai';
    } else if (model.startsWith('claude-') || model.startsWith('anthropic/')) {
      return 'anthropic';
    } else if (model.startsWith('gemini-') || model.startsWith('google/')) {
      return 'google';
    } else if (model.startsWith('deepseek-')) {
      return 'deepseek';
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é OpenAI
      return 'openai';
    }
  }

  /**
   * @group Initialization
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LLM —Å–µ—Ä–≤–∏—Å
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
   */
  async initialize() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      const connectionTest = await this.testConnection();
      
      if (connectionTest) {
        this.isInitialized = true;
        console.log('‚úÖ LLM —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.warn('‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ fallback (–±–µ–∑ API)');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Ç–µ—Å—Ç–µ
        this.isInitialized = true;
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM —Å–µ—Ä–≤–∏—Å–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      this.isInitialized = true;
      return false;
    }
  }

  /**
   * @group Connection Testing
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM API
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
   * @private
   */
  async testConnection() {
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM API...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const testRequest = {
        prompt: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        systemPrompt: '–¢—ã - —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "OK"',
        context: [],
        options: {
          maxTokens: 5,
          temperature: 0.1,
          timeout: 10000
        }
      };
      
      // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const testResponse = await this.callLLMAPI(testRequest);
      
      if (testResponse && testResponse.content) {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:', testResponse.content);
        this.apiAvailable = true;
        return true;
      } else {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM API');
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è:', error.message);
      this.apiAvailable = false;
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
      return false;
    }
  }

  /**
   * @group Text Generation
   * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM
   * @param {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<LLMResponse>} –û—Ç–≤–µ—Ç –æ—Ç LLM
   */
  async generateResponse(prompt, options = {}) {
    if (!this.isInitialized) {
      throw new Error('LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize()');
    }

    try {
      const startTime = Date.now();
      
      const request = this.buildRequest(prompt, options);
      const response = await this.callLLMAPI(request);
      
      const processingTime = Date.now() - startTime;
      
      return {
        content: response.content,
        metadata: {
          model: this.config.model,
          prompt: prompt,
          options: options
        },
        tokensUsed: response.tokensUsed || 0,
        processingTime: processingTime
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ LLM:', error);
      throw error;
    }
  }

  /**
   * @group Request Building
   * @description –°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM API
   * @param {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {LLMRequest} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @private
   */
  buildRequest(prompt, options) {
    return {
      prompt: prompt,
      systemPrompt: options.systemPrompt || this.getDefaultSystemPrompt(),
      context: options.context || [],
      options: {
        maxTokens: options.maxTokens || this.config.maxTokens,
        temperature: options.temperature || this.config.temperature,
        timeout: options.timeout || this.config.timeout
      }
    };
  }

  /**
   * @group System Prompts
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @returns {string} –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   * @private
   */
  getDefaultSystemPrompt() {
    return `–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. 
    –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.`;
  }

  /**
   * @group API Communication
   * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ ProxyAPI
   * @param {LLMRequest} request - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç –æ—Ç API
   * @private
   */
  async callLLMAPI(request) {
    try {
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ ProxyAPI...');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI API
      const requestData = {
        model: this.config.model,
        messages: [
          {
            role: 'system',
            content: request.systemPrompt || this.getDefaultSystemPrompt()
          },
          {
            role: 'user',
            content: request.prompt
          }
        ],
        max_tokens: request.options.maxTokens,
        temperature: request.options.temperature
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (request.context && request.context.length > 0) {
        request.context.forEach((ctx, index) => {
          if (ctx.role && ctx.content) {
            requestData.messages.splice(-1, 0, {
              role: ctx.role,
              content: ctx.content
            });
          }
        });
      }
      
      console.log('ü§ñ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestData, null, 2));
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const estimatedCost = this.calculateEstimatedCost(requestData);
      console.log(`üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${estimatedCost}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ ProxyAPI
      const response = await fetch(this.config.apiUrl + `/${this.config.modelProvider}/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.config.apiKey}`
        },
        body: JSON.stringify(requestData),
        signal: AbortSignal.timeout(request.options.timeout)
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`ProxyAPI –æ—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }
      
      const responseData = await response.json();
      
      console.log('ü§ñ –û—Ç–≤–µ—Ç –æ—Ç ProxyAPI:', JSON.stringify(responseData, null, 2));
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
      const content = responseData.choices?.[0]?.message?.content;
      if (!content) {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç ProxyAPI');
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
      const actualCost = this.calculateActualCost(responseData, requestData);
      console.log(`üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: ${actualCost}`);
      
      return {
        content: content,
        tokensUsed: responseData.usage?.total_tokens || 0
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ProxyAPI:', error.message);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        content: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`,
        tokensUsed: 0
      };
    }
  }

  /**
   * @group Cost Calculation
   * @description –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} requestData - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {string} –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
   * @private
   */
  calculateEstimatedCost(requestData) {
    const model = requestData.model;
    const maxTokens = requestData.max_tokens || this.config.maxTokens;
    
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
    const tariffs = {
      // OpenAI –º–æ–¥–µ–ª–∏
      'gpt-3.5-turbo-0125': { input: 122.40, output: 367.20 },
      'gpt-4o-mini': { input: 36.72, output: 146.88 },
      'gpt-4o': { input: 612.00, output: 2448.00 },
      'o3-mini': { input: 269.28, output: 1077.12 },
      'o3': { input: 576.00, output: 1600.00 },
      
      // Anthropic –º–æ–¥–µ–ª–∏
      'claude-3-5-sonnet-20241022': { input: 734.40, output: 3672.00 },
      'claude-3-5-haiku-20241022': { input: 244.80, output: 1224.00 },
      'claude-3-7-sonnet-20250219': { input: 734.40, output: 3672.00 },
      
      // Google –º–æ–¥–µ–ª–∏
      'gemini-2.0-flash': { input: 24.48, output: 97.92 },
      'gemini-2.0-flash-lite': { input: 18.36, output: 73.44 },
      'gemini-2.5-flash': { input: 73.44, output: 612.00 },
      
      // DeepSeek –º–æ–¥–µ–ª–∏
      'deepseek-chat': { input: 66.10, output: 269.28 },
      'deepseek-reasoner': { input: 134.64, output: 536.11 }
    };
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –º–æ–¥–µ–ª–∏
    let tariff = null;
    for (const [modelName, modelTariff] of Object.entries(tariffs)) {
      if (model.includes(modelName) || modelName.includes(model)) {
        tariff = modelTariff;
        break;
      }
    }
    
    if (!tariff) {
      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ç–∞—Ä–∏—Ñ—ã
      tariff = { input: 300.00, output: 1200.00 };
      console.log(`‚ö†Ô∏è –¢–∞—Ä–∏—Ñ –¥–ª—è –º–æ–¥–µ–ª–∏ ${model} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è`);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    const inputTokens = this.estimateInputTokens(requestData);
    const estimatedOutputTokens = Math.min(maxTokens, 100); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 100 —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞
    
    const inputCost = (inputTokens / 1000000) * tariff.input;
    const outputCost = (estimatedOutputTokens / 1000000) * tariff.output;
    const totalCost = inputCost + outputCost;
    
    return `${totalCost.toFixed(4)} ‚ÇΩ (–≤—Ö–æ–¥: ${inputCost.toFixed(4)} ‚ÇΩ, –≤—ã—Ö–æ–¥: ~${outputCost.toFixed(4)} ‚ÇΩ)`;
  }

  /**
   * @group Cost Calculation
   * @description –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   * @param {Object} responseData - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
   * @param {Object} requestData - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {string} –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
   * @private
   */
  calculateActualCost(responseData, requestData) {
    const model = requestData.model;
    const usage = responseData.usage;
    
    if (!usage) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)';
    }
    
    const inputTokens = usage.prompt_tokens || 0;
    const outputTokens = usage.completion_tokens || 0;
    
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
    const tariffs = {
      // OpenAI –º–æ–¥–µ–ª–∏
      'gpt-3.5-turbo-0125': { input: 122.40, output: 367.20 },
      'gpt-4o-mini': { input: 36.72, output: 146.88 },
      'gpt-4o': { input: 612.00, output: 2448.00 },
      'o3-mini': { input: 269.28, output: 1077.12 },
      'o3': { input: 576.00, output: 1600.00 },
      
      // Anthropic –º–æ–¥–µ–ª–∏
      'claude-3-5-sonnet-20241022': { input: 734.40, output: 3672.00 },
      'claude-3-5-haiku-20241022': { input: 244.80, output: 1224.00 },
      'claude-3-7-sonnet-20250219': { input: 734.40, output: 3672.00 },
      
      // Google –º–æ–¥–µ–ª–∏
      'gemini-2.0-flash': { input: 24.48, output: 97.92 },
      'gemini-2.0-flash-lite': { input: 18.36, output: 73.44 },
      'gemini-2.5-flash': { input: 73.44, output: 612.00 },
      
      // DeepSeek –º–æ–¥–µ–ª–∏
      'deepseek-chat': { input: 66.10, output: 269.28 },
      'deepseek-reasoner': { input: 134.64, output: 536.11 }
    };
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –º–æ–¥–µ–ª–∏
    let tariff = null;
    for (const [modelName, modelTariff] of Object.entries(tariffs)) {
      if (model.includes(modelName) || modelName.includes(model)) {
        tariff = modelTariff;
        break;
      }
    }
    
    if (!tariff) {
      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ç–∞—Ä–∏—Ñ—ã
      tariff = { input: 300.00, output: 1200.00 };
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const inputCost = (inputTokens / 1000000) * tariff.input;
    const outputCost = (outputTokens / 1000000) * tariff.output;
    const totalCost = inputCost + outputCost;
    
    return `${totalCost.toFixed(4)} ‚ÇΩ (–≤—Ö–æ–¥: ${inputCost.toFixed(4)} ‚ÇΩ, –≤—ã—Ö–æ–¥: ${outputCost.toFixed(4)} ‚ÇΩ)`;
  }

  /**
   * @group Cost Calculation
   * @description –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
   * @param {Object} requestData - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {number} –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
   * @private
   */
  estimateInputTokens(requestData) {
    let totalTokens = 0;
    
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    requestData.messages.forEach(message => {
      totalTokens += Math.ceil(message.content.length / 4);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    totalTokens += 50; // –ü—Ä–∏–º–µ—Ä–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    return totalTokens;
  }

  /**
   * @group Utility Methods
   * @description –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ API
   * @param {number} ms - –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns {Promise<void>}
   * @private
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @returns {boolean} true –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
   */
  isReady() {
    return this.isInitialized;
  }

  /**
   * @group Accessors
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
   * @returns {boolean} true –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω
   */
  isAPIAvailable() {
    return this.isInitialized && this.apiAvailable;
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
   * @returns {LLMConfig} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±–µ–∑ API –∫–ª—é—á–∞)
   */
  getConfig() {
    const safeConfig = { ...this.config };
    delete safeConfig.apiKey; // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º API –∫–ª—é—á
    return safeConfig;
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  getInfo() {
    return {
      name: 'ProxyAPI Service',
      version: '2.0.0',
      isReady: this.isInitialized,
      isAPIAvailable: this.apiAvailable,
      model: this.config.model,
      apiUrl: this.config.apiUrl
    };
  }
}

module.exports = LLMService;
