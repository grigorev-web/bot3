/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ —Å—Ç–∏–∫–µ—Ä—ã
 * @author Telegram Bot Team
 * @version 1.0.0
 * @since 2024-01-01
 * @requires node-telegram-bot-api
 */

/**
 * @typedef {Object} MediaMessage
 * @property {number} chat.id - ID —á–∞—Ç–∞
 * @property {Array} [photo] - –ú–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤
 * @property {Object} [document] - –û–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {Object} [voice] - –û–±—ä–µ–∫—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @property {Object} [video] - –û–±—ä–µ–∫—Ç –≤–∏–¥–µ–æ
 * @property {Object} [audio] - –û–±—ä–µ–∫—Ç –∞—É–¥–∏–æ
 * @property {Object} [sticker] - –û–±—ä–µ–∫—Ç —Å—Ç–∏–∫–µ—Ä–∞
 */

/**
 * @typedef {Object} MediaType
 * @property {string} type - –¢–∏–ø –º–µ–¥–∏–∞
 * @property {string} emoji - –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞
 * @property {string} description - –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
 */

/**
 * @class MediaMessageHandler
 * @description –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @example
 * const mediaHandler = new MediaMessageHandler(bot);
 * if (mediaHandler.canHandle(message)) {
 *   mediaHandler.handleMediaMessage(message);
 * }
 */
class MediaMessageHandler {
  /**
   * @constructor
   * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
   * @throws {Error} –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
   */
  constructor(bot) {
    if (!bot) {
      throw new Error('–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è MediaMessageHandler');
    }
    
    this.bot = bot;
    this.mediaTypes = this.getMediaTypes();
    
    console.log('üîß MediaMessageHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * @group Media Type Definitions
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
   * @returns {Array<MediaType>} –ú–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
   * @private
   */
  getMediaTypes() {
    return [
      { type: 'photo', emoji: 'üì∏', description: '—Ñ–æ—Ç–æ' },
      { type: 'document', emoji: 'üìÑ', description: '–¥–æ–∫—É–º–µ–Ω—Ç' },
      { type: 'voice', emoji: 'üé§', description: '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
      { type: 'video', emoji: 'üé•', description: '–≤–∏–¥–µ–æ' },
      { type: 'audio', emoji: 'üéµ', description: '–∞—É–¥–∏–æ' },
      { type: 'sticker', emoji: 'üòÑ', description: '—Å—Ç–∏–∫–µ—Ä' }
    ];
  }

  /**
   * @group Message Processing
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
   */
  async handleMediaMessage(msg) {
    try {
      const chatId = msg.chat.id;
      const mediaType = this.detectMediaType(msg);
      
      if (!mediaType) {
        console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
        return false;
      }
      
      console.log(`üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${mediaType.description} –æ—Ç —á–∞—Ç–∞ ${chatId}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      const result = await this.processMediaByType(msg, chatId, mediaType);
      
      if (result) {
        console.log(`‚úÖ ${mediaType.description} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      await this.sendErrorMessage(msg.chat.id);
      return false;
    }
  }

  /**
   * @group Media Detection
   * @description –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {MediaType|null} –¢–∏–ø –º–µ–¥–∏–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
   * @private
   */
  detectMediaType(msg) {
    for (const mediaType of this.mediaTypes) {
      if (msg[mediaType.type]) {
        return mediaType;
      }
    }
    return null;
  }

  /**
   * @group Media Processing
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @param {MediaType} mediaType - –¢–∏–ø –º–µ–¥–∏–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
   * @private
   */
  async processMediaByType(msg, chatId, mediaType) {
    const handlers = {
      photo: () => this.handlePhoto(msg, chatId),
      document: () => this.handleDocument(msg, chatId),
      voice: () => this.handleVoice(msg, chatId),
      video: () => this.handleVideo(msg, chatId),
      audio: () => this.handleAudio(msg, chatId),
      sticker: () => this.handleSticker(msg, chatId)
    };
    
    const handler = handlers[mediaType.type];
    if (handler) {
      return await handler();
    }
    
    return false;
  }

  /**
   * @group Photo Handling
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
   * @private
   */
  async handlePhoto(msg, chatId) {
    try {
      const photoCount = msg.photo.length;
      const response = `üì∏ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ${photoCount > 1 ? ` (${photoCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)` : ''}! ` +
                      `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`;
      
      await this.bot.sendMessage(chatId, response);
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
      return false;
    }
  }

  /**
   * @group Document Handling
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
   * @private
   */
  async handleDocument(msg, chatId) {
    try {
      const fileName = msg.document.file_name || '–¥–æ–∫—É–º–µ–Ω—Ç';
      const fileSize = this.formatFileSize(msg.document.file_size);
      const mimeType = msg.document.mime_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
      
      const response = `üìÑ –ü–æ–ª—É—á–∏–ª –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç "<b>${fileName}</b>"!\n\n` +
                      `üìä –†–∞–∑–º–µ—Ä: ${fileSize}\n` +
                      `üîß –¢–∏–ø: ${mimeType}\n\n` +
                      `‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.`;
      
      await this.bot.sendMessage(chatId, response, { parse_mode: 'HTML' });
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      return false;
    }
  }

  /**
   * @group Voice Handling
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
   * @private
   */
  async handleVoice(msg, chatId) {
    try {
      const duration = msg.voice.duration || 0;
      const durationText = this.formatDuration(duration);
      
      const response = `üé§ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${durationText})!\n\n` +
                      `üéµ –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –≤–∞—Å —Å–ª—ã—à–∞—Ç—å.`;
      
      await this.bot.sendMessage(chatId, response);
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * @group Video Handling
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
   * @private
   */
  async handleVideo(msg, chatId) {
    try {
      const duration = msg.video.duration || 0;
      const durationText = this.formatDuration(duration);
      
      const response = `üé• –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –≤–∏–¥–µ–æ (${durationText})!\n\n` +
                      `üé¨ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ–ª–∏–∫!`;
      
      await this.bot.sendMessage(chatId, response);
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:', error);
      return false;
    }
  }

  /**
   * @group Audio Handling
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
   * @private
   */
  async handleAudio(msg, chatId) {
    try {
      const title = msg.audio.title || '–∞—É–¥–∏–æ';
      const performer = msg.audio.performer || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
      const duration = msg.audio.duration || 0;
      const durationText = this.formatDuration(duration);
      
      const response = `üéµ –ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ "<b>${title}</b>" –æ—Ç ${performer}!\n\n` +
                      `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationText}\n\n` +
                      `üé∂ –û—Ç–ª–∏—á–Ω–∞—è –º—É–∑—ã–∫–∞!`;
      
      await this.bot.sendMessage(chatId, response, { parse_mode: 'HTML' });
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:', error);
      return false;
    }
  }

  /**
   * @group Sticker Handling
   * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {MediaMessage} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
   * @private
   */
  async handleSticker(msg, chatId) {
    try {
      const emoji = msg.sticker.emoji || 'üòÑ';
      const setName = msg.sticker.set_name || '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä';
      
      const response = `${emoji} –ü–æ–ª—É—á–∏–ª –≤–∞—à —Å—Ç–∏–∫–µ—Ä –∏–∑ –Ω–∞–±–æ—Ä–∞ "${setName}"!\n\n` +
                      `üé≠ –û—á–µ–Ω—å –º–∏–ª–æ!`;
      
      await this.bot.sendMessage(chatId, response);
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞:', error);
      return false;
    }
  }

  /**
   * @group Utility Methods
   * @description –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
   * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
   * @private
   */
  formatFileSize(bytes) {
    if (!bytes) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  }

  /**
   * @group Utility Methods
   * @description –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
   * @param {number} seconds - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
   * @private
   */
  formatDuration(seconds) {
    if (!seconds) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    
    if (minutes > 0) {
      return `${minutes} –º–∏–Ω ${remainingSeconds} —Å–µ–∫`;
    }
    
    return `${remainingSeconds} —Å–µ–∫`;
  }

  /**
   * @group Error Handling
   * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param {number} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<void>}
   * @private
   */
  async sendErrorMessage(chatId) {
    try {
      const errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      await this.bot.sendMessage(chatId, errorMessage);
    } catch (sendError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }

  /**
   * @group Message Validation
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {Object} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
   * @returns {boolean} true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
   */
  canHandle(msg) {
    return this.detectMediaType(msg) !== null;
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
   * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
   */
  getSupportedMediaTypes() {
    return this.mediaTypes.map(type => type.type);
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–¥–∏–∞
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  getStats() {
    return {
      handlerName: 'MediaMessageHandler',
      supportedTypes: this.getSupportedMediaTypes(),
      totalTypes: this.mediaTypes.length
    };
  }
}

module.exports = MediaMessageHandler;
