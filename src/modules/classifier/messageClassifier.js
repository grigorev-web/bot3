/**
 * @fileoverview –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM
 * @description –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø–æ–º–æ—â—å—é LLM –¥–ª—è —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
 * @author Telegram Bot Team
 * @version 1.0.0
 * @since 2024-01-01
 * @requires ../services/llm/llmService
 */

const LLMService = require('../../services/llm/llmService');

/**
 * @typedef {Object} MessageCategory
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1-10)
 * @property {string} handler - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 * @property {Object} metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */

/**
 * @typedef {Object} ClassificationResult
 * @property {string} categoryId - ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string} categoryName - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {number} confidence - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (0.0 - 1.0)
 * @property {Object} metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @property {string} reasoning - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @property {number} processingTime - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */

/**
 * @class MessageClassifier
 * @description –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LLM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @example
 * const classifier = new MessageClassifier(llmService);
 * const result = await classifier.classifyMessage('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?');
 */
class MessageClassifier {
  /**
   * @constructor
   * @param {LLMService} llmService - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
   * @throws {Error} –ï—Å–ª–∏ LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
   */
  constructor(llmService) {
    if (!llmService) {
      throw new Error('LLM —Å–µ—Ä–≤–∏—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è MessageClassifier');
    }
    
    this.llmService = llmService;
    this.categories = this.initializeCategories();
    this.isInitialized = false;
    
    console.log('üîß MessageClassifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * @group Categories Initialization
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @returns {Array<MessageCategory>} –ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @private
   */
  initializeCategories() {
    return [
      {
        id: 'greeting',
        name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
        description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
        priority: 1,
        handler: 'greetingHandler',
        metadata: {
          examples: ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hi', 'hello'],
          responseType: 'friendly'
        }
      },
      {
        id: 'question',
        name: '–í–æ–ø—Ä–æ—Å',
        description: '–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        priority: 2,
        handler: 'questionHandler',
        metadata: {
          examples: ['–∫–∞–∫ –¥–µ–ª–∞?', '—á—Ç–æ —ç—Ç–æ?', '–ø–æ–º–æ–≥–∏'],
          responseType: 'informative'
        }
      },
      {
        id: 'request',
        name: '–ó–∞–ø—Ä–æ—Å',
        description: '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π',
        priority: 3,
        handler: 'requestHandler',
        metadata: {
          examples: ['—Å–¥–µ–ª–∞–π —ç—Ç–æ', '–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', '–ø–æ–∫–∞–∂–∏'],
          responseType: 'action'
        }
      },
      {
        id: 'feedback',
        name: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
        description: '–û—Ç–∑—ã–≤—ã, –∂–∞–ª–æ–±—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
        priority: 4,
        handler: 'feedbackHandler',
        metadata: {
          examples: ['—Å–ø–∞—Å–∏–±–æ', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—Ç–ª–∏—á–Ω–æ'],
          responseType: 'acknowledgment'
        }
      },
      {
        id: 'casual',
        name: '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä',
        description: '–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ',
        priority: 5,
        handler: 'casualHandler',
        metadata: {
          examples: ['–∫–∞–∫ –ø–æ–≥–æ–¥–∞', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏'],
          responseType: 'conversational'
        }
      }
    ];
  }

  /**
   * @group Initialization
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
   */
  async initialize() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageClassifier...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å LLM —Å–µ—Ä–≤–∏—Å–∞
      if (this.llmService && typeof this.llmService.isReady === 'function') {
        if (!this.llmService.isReady()) {
          try {
            await this.llmService.initialize();
          } catch (llmError) {
            console.warn('‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', llmError.message);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑ LLM
          }
        }
      } else {
        console.warn('‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ fallback —Ä–µ–∂–∏–º–µ');
      }
      
      this.isInitialized = true;
      console.log('‚úÖ MessageClassifier —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageClassifier:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      this.isInitialized = true;
      return false;
    }
  }

  /**
   * @group Message Classification
   * @description –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @param {Object} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @returns {Promise<ClassificationResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async classifyMessage(message, context = {}) {
    if (!this.isInitialized) {
      throw new Error('MessageClassifier –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize()');
    }

    try {
      const startTime = Date.now();
      
      console.log(`üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM —Å–µ—Ä–≤–∏—Å–∞
      if (!this.llmService || !this.llmService.isAPIAvailable()) {
        console.log('‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é');
        return this.getFallbackClassification(message);
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const classificationPrompt = this.buildClassificationPrompt(message, context);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
      const llmResponse = await this.llmService.generateResponse(classificationPrompt, {
        maxTokens: 200,
        temperature: 0.3,
        systemPrompt: this.getClassificationSystemPrompt()
      });
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
      const classificationResult = this.parseLLMResponse(llmResponse.content, message);
      
      const processingTime = Date.now() - startTime;
      
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: ${classificationResult.categoryName}`);
      
      return {
        ...classificationResult,
        processingTime: processingTime
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
      return this.getFallbackClassification(message);
    }
  }

  /**
   * @group Prompt Building
   * @description –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @returns {string} –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
   * @private
   */
  buildClassificationPrompt(message, context) {
    const categoriesInfo = this.categories.map(cat => 
      `${cat.id}: ${cat.name} - ${cat.description}`
    ).join('\n');
    
    let prompt = `–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n${categoriesInfo}\n\n`;
    prompt += `–°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"\n\n`;
    
    if (context.userHistory) {
      prompt += `–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${context.userHistory}\n\n`;
    }
    
    prompt += `–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{\n  "categoryId": "id_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏",\n  "confidence": 0.95,\n  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"\n}`;
    
    return prompt;
  }

  /**
   * @group System Prompts
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @returns {string} –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   * @private
   */
  getClassificationSystemPrompt() {
    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. 
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
    –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.`;
  }

  /**
   * @group Response Parsing
   * @description –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM
   * @param {string} llmResponse - –û—Ç–≤–µ—Ç –æ—Ç LLM
   * @param {string} originalMessage - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {ClassificationResult} –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @private
   */
  parseLLMResponse(llmResponse, originalMessage) {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = llmResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
        const category = this.categories.find(cat => cat.id === parsed.categoryId);
        
        if (category) {
          return {
            categoryId: category.id,
            categoryName: category.name,
            confidence: Math.min(Math.max(parsed.confidence || 0.8, 0.0), 1.0),
            metadata: category.metadata,
            reasoning: parsed.reasoning || '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ LLM'
          };
        }
      }
      
      // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç LLM');
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ LLM, –∏—Å–ø–æ–ª—å–∑—É—é fallback:', error);
      return this.getFallbackClassification(originalMessage);
    }
  }

  /**
   * @group Fallback Classification
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ LLM
   * @param {string} message - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {ClassificationResult} Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @private
   */
  getFallbackClassification(message) {
    const lowerMessage = message.toLowerCase();
    
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('hi') || lowerMessage.includes('hello')) {
      return this.createClassificationResult('greeting', 0.7, 'Fallback: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞');
    }
    
    if (lowerMessage.includes('?') || lowerMessage.includes('–∫–∞–∫') || lowerMessage.includes('—á—Ç–æ')) {
      return this.createClassificationResult('question', 0.7, 'Fallback: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä');
    }
    
    if (lowerMessage.includes('—Å–ø–∞—Å–∏–±–æ') || lowerMessage.includes('thanks')) {
      return this.createClassificationResult('feedback', 0.8, 'Fallback: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å');
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
    return this.createClassificationResult('casual', 0.5, 'Fallback: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
  }

  /**
   * @group Result Creation
   * @description –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {number} confidence - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
   * @param {string} reasoning - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
   * @returns {ClassificationResult} –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @private
   */
  createClassificationResult(categoryId, confidence, reasoning) {
    const category = this.categories.find(cat => cat.id === categoryId);
    
    return {
      categoryId: categoryId,
      categoryName: category ? category.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      confidence: confidence,
      metadata: category ? category.metadata : {},
      reasoning: reasoning
    };
  }

  /**
   * @group Category Management
   * @description –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   * @param {MessageCategory} category - –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   */
  addCategory(category) {
    if (!category.id || !category.name) {
      throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å id –∏ name');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
    if (this.categories.find(cat => cat.id === category.id)) {
      throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID "${category.id}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
    
    this.categories.push(category);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    this.categories.sort((a, b) => a.priority - b.priority);
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`);
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @returns {Array<MessageCategory>} –ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  getCategories() {
    return [...this.categories];
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
   * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @returns {MessageCategory|null} –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ null
   */
  getCategoryById(categoryId) {
    return this.categories.find(cat => cat.id === categoryId) || null;
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ
   */
  getInfo() {
    return {
      name: 'Message Classifier',
      version: '1.0.0',
      isReady: this.isInitialized,
      isLLMAvailable: this.llmService && typeof this.llmService.isAPIAvailable === 'function' && this.llmService.isAPIAvailable(),
      categoriesCount: this.categories.length,
      llmService: this.llmService ? this.llmService.getInfo() : null
    };
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    return {
      totalCategories: this.categories.length,
      priorityRange: {
        min: Math.min(...this.categories.map(c => c.priority)),
        max: Math.max(...this.categories.map(c => c.priority))
      },
      handlers: this.categories.map(c => c.handler)
    };
  }
}

module.exports = MessageClassifier;
