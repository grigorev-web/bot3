/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (Large Language Models)
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ProxyAPI –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
 * @author Telegram Bot Team
 * @version 2.0.0
 * @since 2024-01-01
 */

/**
 * @typedef {Object} LLMConfig
 * @property {string} apiKey - API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ProxyAPI
 * @property {string} apiUrl - URL API —Å–µ—Ä–≤–∏—Å–∞ ProxyAPI
 * @property {string} model - –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * @property {number} maxTokens - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
 * @property {number} temperature - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0 - 1.0)
 * @property {number} timeout - –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */

/**
 * @typedef {Object} LLMRequest
 * @property {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
 * @property {string} [systemPrompt] - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @property {Array<Object>} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @property {Object} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 */

/**
 * @typedef {Object} LLMResponse
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
 * @property {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
 * @property {number} tokensUsed - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * @property {number} processingTime - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */

/**
 * @class LLMService
 * @description –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ProxyAPI
 * @example
 * const llmService = new LLMService(config);
 * const response = await llmService.generateResponse('–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');
 */
class LLMService {
  /**
   * @constructor
   * @param {LLMConfig} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞
   * @throws {Error} –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞
   */
  constructor(config) {
    this.validateConfig(config);
    this.config = { ...config };
    this.isInitialized = false;
    this.apiAvailable = false;
    
    console.log('üîß LLMService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * @group Configuration
   * @description –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM —Å–µ—Ä–≤–∏—Å–∞
   * @param {LLMConfig} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @throws {Error} –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞
   * @private
   */
  validateConfig(config) {
    if (!config.apiKey) {
      throw new Error('API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞');
    }
    
    if (!config.apiUrl) {
      throw new Error('URL API –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞');
    }
    
    if (!config.model) {
      throw new Error('–ú–æ–¥–µ–ª—å LLM –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!config.maxTokens) config.maxTokens = 1000;
    if (!config.temperature) config.temperature = 0.7;
    if (!config.timeout) config.timeout = 30000;
  }

  /**
   * @group Initialization
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LLM —Å–µ—Ä–≤–∏—Å
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
   */
  async initialize() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      const connectionTest = await this.testConnection();
      
      if (connectionTest) {
        this.isInitialized = true;
        console.log('‚úÖ LLM —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.warn('‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ fallback (–±–µ–∑ API)');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Ç–µ—Å—Ç–µ
        this.isInitialized = true;
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM —Å–µ—Ä–≤–∏—Å–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      this.isInitialized = true;
      return false;
    }
  }

  /**
   * @group Connection Testing
   * @description –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM API
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
   * @private
   */
  async testConnection() {
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM API...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const testRequest = {
        prompt: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        systemPrompt: '–¢—ã - —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "OK"',
        context: [],
        options: {
          maxTokens: 5,
          temperature: 0.1,
          timeout: 10000
        }
      };
      
      // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const testResponse = await this.callLLMAPI(testRequest);
      
      if (testResponse && testResponse.content) {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.apiAvailable = true;
        return true;
      } else {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM API');
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è:', error.message);
      this.apiAvailable = false;
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
      return false;
    }
  }

  /**
   * @group Text Generation
   * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM
   * @param {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<LLMResponse>} –û—Ç–≤–µ—Ç –æ—Ç LLM
   */
  async generateResponse(prompt, options = {}) {
    if (!this.isInitialized) {
      throw new Error('LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize()');
    }

    try {
      const startTime = Date.now();
      
      const request = this.buildRequest(prompt, options);
      const response = await this.callLLMAPI(request);
      
      const processingTime = Date.now() - startTime;
      
      return {
        content: response.content,
        metadata: {
          model: this.config.model,
          prompt: prompt,
          options: options
        },
        tokensUsed: response.tokensUsed || 0,
        processingTime: processingTime
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ LLM:', error);
      throw error;
    }
  }

  /**
   * @group Request Building
   * @description –°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM API
   * @param {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {LLMRequest} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @private
   */
  buildRequest(prompt, options) {
    return {
      prompt: prompt,
      systemPrompt: options.systemPrompt || this.getDefaultSystemPrompt(),
      context: options.context || [],
      options: {
        maxTokens: options.maxTokens || this.config.maxTokens,
        temperature: options.temperature || this.config.temperature,
        timeout: options.timeout || this.config.timeout
      }
    };
  }

  /**
   * @group System Prompts
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @returns {string} –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   * @private
   */
  getDefaultSystemPrompt() {
    return `–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. 
    –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.`;
  }

  /**
   * @group API Communication
   * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ ProxyAPI
   * @param {LLMRequest} request - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç –æ—Ç API
   * @private
   */
  async callLLMAPI(request) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ ProxyAPI
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    console.log('ü§ñ ProxyAPI –∑–∞–ø—Ä–æ—Å:', JSON.stringify(request, null, 2));
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await this.delay(1000);
    
    return {
      content: `–ó–∞–≥–ª—É—à–∫–∞ ProxyAPI –æ—Ç–≤–µ—Ç–∞ –Ω–∞: "${request.prompt}"`,
      tokensUsed: Math.floor(Math.random() * 100) + 50
    };
  }

  /**
   * @group Utility Methods
   * @description –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ API
   * @param {number} ms - –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns {Promise<void>}
   * @private
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @returns {boolean} true –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
   */
  isReady() {
    return this.isInitialized;
  }

  /**
   * @group Accessors
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
   * @returns {boolean} true –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω
   */
  isAPIAvailable() {
    return this.isInitialized && this.apiAvailable;
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
   * @returns {LLMConfig} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±–µ–∑ API –∫–ª—é—á–∞)
   */
  getConfig() {
    const safeConfig = { ...this.config };
    delete safeConfig.apiKey; // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º API –∫–ª—é—á
    return safeConfig;
  }

  /**
   * @group Accessors
   * @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  getInfo() {
    return {
      name: 'ProxyAPI Service',
      version: '2.0.0',
      isReady: this.isInitialized,
      isAPIAvailable: this.apiAvailable,
      model: this.config.model,
      apiUrl: this.config.apiUrl
    };
  }
}

module.exports = LLMService;
